import gi
import random
import qrcode

import json
import base64
import sys
from tkinter import messagebox
import time
import threading
# gi.require_version('WebKit2', '4.0')
from gi.repository import Gtk, WebKit2, Gio, Gdk, GdkPixbuf, GObject
import os


class FullScreenWebViewExample:

    def __init__(self):
        # eba nın yükleneceği url ve banner için kontrol url si
        self.ebaurl = "https://giris.eba.gov.tr/EBA_GIRIS/qrcode.jsp"
        self.konturl = "https://alpersamur.blogspot.com/p/ebakont.html"
        self.adseba = "https://asoftware.com.tr/askilit/adseba.php"
        self.strteba = False
        # fullscreen durumu ilk başta false ayarlanır sonra pencere oluşunca true yapılır.
        self.fs = False
        self.stpt = True
        self.durum = None
        self.qrlog = False
        self.inf = True
        # kilit dosyasının yolu
        self.lock = "/tmp/askilit.lock"
        # cihazın ilk kez açılıp açılmadığını tespit etmek için argümanlatı alıyoruz.
        self.strt = sys.argv[1] if len(sys.argv) > 1 else None
        # arguman st ise ilk kez açılıyor(autostart dosyası st argumanı ile başlatır)
        # Ana pencereyi oluştur
        self.window = Gtk.Window()
        # pencere kapatılırsa
        self.window.connect('destroy', self.ex)
        self.window.set_default_size(1920, 1080)
        self.window.fullscreen()
        # alt+f4 kombinasyonu engellenmesi için
        self.window.connect("key-press-event", self.on_key_press)
        # pencere bir şekilde küçültülür ise tam ekran yapılır
        self.window.connect("window-state-event", self.setfull)

        self.ext = False
        self.cikacak = False

        # kapat,simge durumuna al barını gizler
        self.window.set_property("skip-taskbar-hint", True)
        self.window.set_decorated(False)

        # Pencereyi her zaman en üstte tut
        self.window.set_keep_above(True)

        # birden fazla çalıştırmayı engelle
        if self.strt == None:
            # uygulama iconuna tıklayarak başlatıldı
            print("none")
            try:
                with open(self.lock, "r+") as dosya:
                    self.lck = dosya.read()
                    dosya.close()
            except Exception as er:
                self.lck = ""
                print(er)
            # uygulamanın bir örneği çalışır değilse
            if self.lck == "":
                # lock dosyası oluştur
                with open(self.lock, "w") as dosya:
                    dosya.write("lock")
                    dosya.close()
            else:
                # bir örneği çalışıyor ise şuankini sonlandır
                print("cikiyom")
                self.ext = True
                self.cikacak = True
                thread = threading.Thread(target=self.cik)
                thread.start()
        else:
            # autostart ile açıldıysa kilit dosyası oluşturulduysa oluşturma yoksa oluştur
            try:
                with open(self.lock, "r+") as dosya:
                    self.lck = dosya.read()
                    dosya.close()
            except:
                self.lck = ""
            if self.lck == "":
                with open(self.lock, "w") as dosya:
                    dosya.write("lock")
                    dosya.close()
        # eğer kapanması gerekiyorsa hiç başlatma(zaten örneği çalışıyorsa vb.)
        if self.ext != True and self.cikacak != True:
            # autolock modülü için benzersiz bir id kaydet
            self.setlock()
            # 20 dakika boyunca kilit açılmaz ise cihazı kapatan methodu arka planda başlat
            thread = threading.Thread(target=self.autoex)
            thread.start()

            # Giriş ekranını oluştur

            # qr kodun gösterileceği image
            self.qr_image = Gtk.Image()

            # banner
            self.adview = WebKit2.WebView()
            self.adview.connect("button-press-event",
                                self.on_webview_button_press)
            self.adview.connect("scroll-event", self.on_webview_scroll)
            self.adview.connect("load-changed", self.ad_event)
            self.adview.connect("motion-notify-event",
                                self.on_webview_motion_notify)
            self.adview.connect("touch-event", self.on_webview_touch_event)
            self.adview.set_size_request(100, 100)

            # Web görünümü oluştur(eba yüklenmesi için)
            self.webview = WebKit2.WebView()
            self.webview.connect("button-press-event",
                                 self.on_webview_button_press)
            self.webview.connect("scroll-event", self.on_webview_scroll)
            self.webview.connect("load-changed", self.load_event)
            self.webview.connect("motion-notify-event",
                                 self.on_webview_motion_notify)
            self.webview.connect("touch-event", self.on_webview_touch_event)
            # butonların ve hakkımda kısmının olduğu box
            self.base_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
            # hakkımda bilgisinin olduğu box ve hakkımda bilgileri
            self.info_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)

            self.infLabel = Gtk.Label(
                label="Alper Samur\ntarafından\ngeliştirildi\n(alpersamur0705@gmail.com)")
            self.infImage = Gtk.Image()

            pixbuf = GdkPixbuf.Pixbuf.new_from_file(
                "/usr/share/askilit/asoftware.png")

            # Yeniden boyutlandır
            scaled_pixbuf = pixbuf.scale_simple(
                100, 100, GdkPixbuf.InterpType.BILINEAR)

            # Yeniden boyutlandırılmış pixbuf'u Gtk.Image nesnesine yükle

            self.infImage.set_from_pixbuf(scaled_pixbuf)

            self.infImage.set_size_request(70, 70)
            image_box = Gtk.EventBox()
            image_box.add(self.infImage)

            # hakkımda butonu
            button = Gtk.Button()
            button.set_label("Hakkımda")
            button.set_border_width(50)  # Kenar boşluğu ekleyin
            button.connect("clicked", self.infoSet)

            # tahtayı kapat butonu
            self.poweroff_button = Gtk.Button(label="Tahtayı Kapat")
            self.poweroff_button.connect("clicked", self.poweroff)
            self.poweroff_button.set_size_request(30, 30)
            # tahtayı yeniden başlat butonu
            self.restart_button = Gtk.Button(label="Tahtayı Yeniden Başlat")
            self.restart_button.connect("clicked", self.reboot)
            self.restart_button.set_size_request(30, 30)
            # boxların içinde öğelerin eklenmesi
            self.info_box.pack_start(image_box, True, True, 0)
            self.info_box.pack_start(self.infLabel, True, True, 0)
            self.base_box.pack_start(self.info_box, True, True, 0)
            self.base_box.pack_start(button, False, False, 0)
            self.base_box.pack_start(self.poweroff_button, True, True, 0)
            self.base_box.pack_start(self.restart_button, True, True, 0)

            self.base_box.set_size_request(-1, 10)

            # eba qr yenileme butonu
            self.show_webview_button = Gtk.Button(label="Eba Qr Yenile")
            self.show_webview_button.connect("clicked", self.toggle_webview)
            self.show_webview_button.set_size_request(
                100, 30)

            # tüm öğelerin içinde olduğu box(ebaweb,qr vb.)

            self.vbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
            # internet varken gössterilen box(eba qr)
            self.netbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
            self.disbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
            # öğelerin box'a eklenmesi
            self.vbox.pack_start(self.base_box, False, False, 0)

            self.disbox.pack_start(self.webview, True, True, 0)
            self.disbox.pack_start(self.show_webview_button, False, False, 0)
            self.netbox.pack_start(self.adview, False, False, 0)
            self.adview.load_uri("https://www.google.com")
            self.netbox.pack_start(self.disbox, True, True, 0)
            self.vbox.pack_start(self.netbox, True, True, 0)
            # giriş ekranı oluşturulması(internet durumuna göre)
            self.create_login_screen()
            self.vbox.pack_start(self.login_box, True, True, 0)

            # Ana pencereye vbox'u ekle
            self.window.add(self.vbox)

            # Pencereyi göster
            self.window.show_all()
            self.infoSet(None)

    def infoSet(self, widget):
        # info bölümünü göster/gizle
        if self.inf:
            print("hided")
            self.info_box.hide()
            self.infImage.hide()
            self.infLabel.hide()
            self.inf = False
        else:
            print("showed")
            self.info_box.show()
            self.infImage.show()
            self.infLabel.show()
            self.inf = True

    def setfull(self, widget, event):
        # tam ekrandan çıkarsa uygulamayı yeniden başlat
        if event.changed_mask & Gdk.WindowState.FULLSCREEN:
            # ilk açılışta pencere oluşunca tetiklenmeyi engelle
            if self.fs:
                print("fs")
                self.cik()
            else:
                self.fs = True

    def setlock(self):
        # autolock modülü için benzersiz kod oluşturur
        with open("/tmp/lock.lock", "w") as lock_file:
            program_id = str(random.randint(1000000, 9999999))

            lock_file.write(program_id)
            lock_file.close()

    def poweroff(self, widget):
        # sistemi kapatır

        os.system("systemctl poweroff")

    def reboot(self, widget):
        # sistemi yeniden başlat
        os.system("systemctl reboot")
#    def cikis(self,widget):
# oturumu kapat(devre dışı)
#        import os
#        os.system("gnome-session-quit")

    def cik(self):
        # uygulamayı kapat (1sn bekleme gerekli)
        time.sleep(1)
        self.window.destroy()

    def ex(self, widget):
        # giriş yapmadan uygulama kapanmaya zorlanırsa geri aç giriş yapıldıysa kapat ve oto kilit modülünü başlat
        if self.ext:
            print("ext")
            if self.cikacak:
                print("cik")
                self.stpt = False
                Gtk.main_quit()
            else:
                if self.qrlog:
                    import subprocess
                    subprocess.Popen(["python3", "/usr/bin/asrestart"])
                with open(self.lock, "w") as dosya:
                    dosya.write("")
                    dosya.close()
                import subprocess
                print("ok")
                subprocess.Popen(["python3", "/usr/bin/asautolock"])
                Gtk.main_quit()
                self.stpt = False
        else:
            print("no")

            import sys
            python = sys.executable
            os.execl(python, python, *sys.argv, "pst")

    def netkontrol(self):
        # Dakikada bir kere interneti kontrol et giderse/gelirse uygun moda geç
        self.tim = 1*60

        while self.stpt:
            if self.checknet() == False:
                if self.durum == None:
                    time.sleep(0.1)
                    self.qrmode()
                    self.durum = True
                    self.tim = 20
                    # cihazın ilk açılışında tek seferliğine 20 saniye sonra tekrar kontrol et(ilk açılışta inetrnet geç gelebilir)
                elif self.durum == False:
                    self.qrmode()
                    self.durum = True
                else:
                    self.tim = 1*60
            else:
                if self.durum == None:
                    time.sleep(0.1)
                    self.webmode()
                    self.durum = False
                    self.tim = 20
                elif self.durum == True:
                    self.webmode()
                    self.durum = False
                else:
                    # eba qr'ı dakikada bir yenile
                    try:
                        self.webview.load_uri(self.ebaurl)
                    except:
                        print("ex")

                    self.tim = 1*60
            print("sleep")
            time.sleep(self.tim)
            print("loss")

    def ad_event(self, webkit, event):
        # banner yüklenme durumu
        link = webkit.get_uri()
        if "google" in link:

            time.sleep(0.2)
            self.adview.hide()
        else:

            time.sleep(0.2)
            self.adview.show()

    def load_event(self, webkit, event):
        # eba yüklenme durumu
        if self.strteba:
            # uygulama başlangıcında tüm görünümleri gizle
            time.sleep(0.3)
            self.rmall()
            return
        link = webkit.get_uri()
        if "cikis" in link:
            return
        if "qrcode" in link:
            return
        elif "uygulama" in link:
            # giriş yapıldı ve user data çekiliyor(öğretmenlik kontrolü için)
            resource = webkit.get_main_resource()
            if resource:
                resource.get_data(None, self.response_data, None)
            return
        elif "ders.eba.gov.tr" not in link:
            self.webview.set_size_request(100, 200)
            self.webview.load_uri(self.ebaurl)
            return
        # user data getiren url yi yükle
        self.webview.load_uri(
            "https://uygulama-ebaders.eba.gov.tr/ders/FrontEndService//home/user/getuserinfo")

    def checknet(self):
        # interneti kontrol et
        import platform
        import subprocess

        try:
            # Platforma göre ping komutu ve argümanları belirleme
            if platform.system().lower() == "windows":
                command = ["ping", "-n", "1", "-w", "500", "8.8.8.8"]
            else:
                command = ["ping", "-c", "1", "-W", "1", "8.8.8.8"]

            # Ping gönderme
            subprocess.run(command, stdout=subprocess.PIPE,
                           stderr=subprocess.PIPE, check=True)

            return True  # Başarılı bir ping sonucu alındıysa True döndür
        except subprocess.CalledProcessError:
            return False  # Ping başarısız olduysa veya süre aşıldıysa False döndür

    def response_data(self, resource, result, data=None):
        # kullanıcı bilgisini tmp ye kaydet
        html = resource.get_data_finish(result)
        f = open("/tmp/aaa", "w")
        f.write(html.decode("utf-8"))
        f.close()
        # kullanıcıyı kontrol et
        self.check_user_and_login()

    def check_user_and_login(self):
        # kullanıcı kontrol
        try:

            import json
            data = json.load(open("/tmp/aaa", "r"))
            os.unlink("/tmp/aaa")
            # kullanıcı rolü
            role = str(data["userInfoData"]["role"])
            # öğretmen ise kilit uygulamasını sonlandır
            if role == "2" or role == "300" or role == "301":
                self.ext = True
                self.window.destroy()
            # uygulamanın sahibi ise kilit uygulamasını sonlandır
            elif str(data["userInfoData"]["userId"]) == str("27e1a1c4718486a312761b18be65cdb3"):
                self.ext = True
                self.window.destroy()
            else:
                # öğretmen değil ise hesaptan çıkış yap ve qr ı tekrar göster
                self.clear_cache()
                return

        except Exception as e:
            error_message = f"An error occurred: {e}"
            print(error_message)

    def on_key_press(self, widget, event):
        if event.keyval == 65513:
            # alt+f4'ü engelle
            return True
        else:
            return False

    def clear_cache(self):
        # girilen hesaptan çıkış yap
        self.webview.load_uri("https://www.eba.gov.tr/cikis")

        time.sleep(2)

    def geri_say(self):
        # ilk açılışta ebaqr yükleniyor göster(internet geç geldiğinden gelene kadar beklemek için)
        self.strteba = True

        time.sleep(0.3)
        self.rmall()

        while self.geri_sayim_deger > 0:
            # Arayüz güncellemelerini ana döngü içinde yapmak için GLib.idle_add kullanılır
            GObject.idle_add(self.update_ui)

            time.sleep(1)
            self.geri_sayim_deger -= 1
        self.kutu.hide()
        self.strteba = False
# internet durumuna göre olan mod açılır
        if self.checknet():
            self.webmode()

        else:
            self.qrmode()

    def webmode(self):
        # tüm görünümleri kaldır ve ebaqr için gerekli olan şeyleri görüntüle
        self.rmall()
        import requests
        res = requests.get(self.konturl)
        if str(res.status_code) == "200":
            try:
                # self.adview.show()
                self.adview.load_uri(self.adseba)
            except Exception as e:
                print(e)

        else:
            self.adview.hide()
        self.webview.load_uri(self.ebaurl)
        self.login_box.hide()
        self.netbox.show()
        print("w")

    def qrmode(self):
        # tüm görünümler kaldırılır normal qr için gerekli görünümler görünür hale getirilir
        self.rmall()
        self.netbox.hide()
        self.login_box.show()
        random_numbe = str(random.randint(100000, 999999))
        random_number = int(random_numbe.replace(str(9), str(8)))

        qr_code_path = self.generate_qr_code(random_number)
        self.qr_image.set_from_file(qr_code_path)

        # Şifre kontrolü için rastgele sayıyı sakla
        self.random_number_for_password = random_number
        print("q")

    def rmall(self):
        # tüm görünümler gizlenir
        self.netbox.hide()
        self.login_box.hide()
        print("rmed")

    def update_ui(self):
        # Arayüz güncellemelerini yap
        self.geri_sayim_etiket.set_label(
            "Geri Sayım: {}".format(self.geri_sayim_deger))

        # Progress bar'ı güncelle
        oran = (19 - self.geri_sayim_deger) / 19.0
        self.yukleme_cubugu.set_fraction(oran)

    def create_login_screen(self):
        # Giriş ekranını oluştur
        self.login_box = Gtk.Box(
            orientation=Gtk.Orientation.VERTICAL, spacing=6)
        grid = Gtk.Grid(column_spacing=10, row_spacing=10)
        grid.set_halign(Gtk.Align.CENTER)
        grid.set_valign(Gtk.Align.CENTER)
        self.webview.load_uri(self.ebaurl)
        # Şifre etiketi
        password_label = Gtk.Label(label="Şifre:")
        grid.attach(password_label, 0, 3, 1, 1)

        password_entry = Gtk.Entry()
        password_entry.set_visibility(False)
        password_entry.set_input_purpose(
            Gtk.InputPurpose.NUMBER)  # Yalnızca sayı girişi
        password_entry.connect("changed", self.validate_password)
        grid.attach(password_entry, 1, 3, 1, 1)
        # Numpad ekranını oluştur
        numpad_grid = Gtk.Grid()
        for i in range(9):
            button = Gtk.Button(label=str(i))
            button.connect("clicked", self.numpad_button_clicked,
                           password_entry, i)
            numpad_grid.attach(button, i % 3, i // 3, 1, 1)
            if i == 2:
                delbut = Gtk.Button(label="⌫")
                delbut.connect("clicked", self.del_event, password_entry, i+1)
                numpad_grid.attach(delbut, i+1 % 3, i // 3, 1, 1)

        grid.attach(numpad_grid, 0, 4, 2, 1)

        self.qr_image.set_size_request(250, 250)
        grid.attach(self.qr_image, 0, 0, 2, 1)

        text = ""
        self.asft = Gtk.Label(label=text)
        grid.attach(self.asft, 0, 1, 2, 1)
        # normal qr için random sayı oluştur
        random_numbe = str(random.randint(100000, 999999))
        random_number = int(random_numbe.replace(str(9), str(8)))

        qr_code_path = self.generate_qr_code(random_number)
        self.qr_image.set_from_file(qr_code_path)
        self.random_number_for_password = random_number
        # Ortalanmış giriş ekranı
        self.login_box.pack_start(grid, True, True, 0)
        if self.strt != "st":
            # cihazilk kez açılmadıysa
            if self.checknet() == False:
                # inetrnet yok
                self.qrmode()

            else:
                self.webmode()
                self.webview.set_size_request(100, 200)

                # internet var
        else:
            # cihaz ilk kez açıldıysa
            self.rmall()
            resim_yolu = "/usr/share/askilit/ebaqr.png"

            pixbuf = GdkPixbuf.Pixbuf.new_from_file(resim_yolu)

            # Yeniden boyutlandır
            scaled_pixbuf = pixbuf.scale_simple(
                400, 400, GdkPixbuf.InterpType.BILINEAR)

            # Yeniden boyutlandırılmış pixbuf'u Gtk.Image nesnesine yükle

            self.etiket_resim = Gtk.Image.new_from_pixbuf(scaled_pixbuf)
            # geri sayım yap
            self.yukleme_cubugu = Gtk.ProgressBar()
            self.yukleme_cubugu.set_pulse_step(0.1)
            self.geri_sayim_etiket = Gtk.Label(label="Geri Sayım:")
            self.geri_sayim_deger = 19

            self.kutu = Gtk.VBox(spacing=10)
            self.kutu.pack_start(self.etiket_resim, True, True, 0)
            self.kutu.pack_start(self.yukleme_cubugu, False, False, 0)
            self.kutu.pack_start(self.geri_sayim_etiket, False, False, 0)
            self.vbox.pack_start(self.kutu, True, True, 0)

            self.geri_sayim_thread = threading.Thread(target=self.geri_say)
            self.geri_sayim_thread.start()

        thread = threading.Thread(target=self.netkontrol)
        thread.start()
        # 1 dakikada bir interneti kontrol et

    def autoex(self):
        # 20 dakika boyunca giriş yapılmamış ise cihaz kapatılır.
        time.sleep(20*60)
        if self.stpt:
            if self.control() != None:
                # uygulama halen çalışıyorsa

                os.system("systemctl poweroff")

    def control(self):
        # uygulamanın çalışma durumu kontrol edilir
        try:
            with open(self.lock, "r") as lock_file:
                content = lock_file.read()
                lock_file.close()
            if content != "lock":
                content = None
            return content
        except FileNotFoundError:
            return None

    def numpad_button_clicked(self, widget, entry, digit):
        # qr ile girişte numpad'de basılan tuşları şifre bölümüne yazar
        current_text = entry.get_text()
        entry.set_text(current_text + str(digit))
        if current_text + str(digit) == str(self.random_number_for_password):
            self.ext = True
            self.qrlog = True
            self.window.destroy()

    def del_event(self, widget, entry, digit):
        # numpad de sil tuşu
        current_text = entry.get_text()
        entry.set_text(current_text[:-1])

    def toggle_webview(self, widget):
        # Butona tıklandığında eba qr'ı yenile
        self.webview.load_uri(self.ebaurl)

    def on_webview_motion_notify(self, widget, event):
        # Fare hareketini engelle
        return True

    def on_webview_touch_event(self, widget, event):
        # Dokunmatik etkileşimleri engelle
        return True

    def on_webview_button_press(self, widget, event):
        # Web görünümünde tıklama olayını engelle
        return True

    def on_webview_scroll(self, widget, event):
        # Web görünümünde kaydırma olayını engelle
        return True

    def validate_password(self, entry):
        # Şifrenin sadece sayılardan oluşmasını sağla
        text = entry.get_text()
        entry.set_text(''.join(char for char in text if char.isdigit()))

    def generate_qr_code(self, number):
        # Verilen sayıdan QR kodunu oluştur
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(str(number))
        qr.make(fit=True)

        img_path = "/tmp/qrcode.png"
        img = qr.make_image(fill_color="black", back_color="white")
        img.save(img_path)

        return img_path


if __name__ == "__main__":
    try:
        try:
            with open(".sr", "r") as dosya:
                r = dosya.read()
                dosya.close()
        except:
            r = ""
        # daha önce uyarılmamışsa uyarı gösterir
        if r == "":
            with open(".sr", "w") as dosya:
                dosya.write("sh")
                dosya.close()
            import getTouch
            # kurulum için gerekli kodu gösterir
            result = messagebox.askokcancel(
                "Uyarı", f"25 Dakika boyunca dokunma olmazsa otomatik olarak tahtayı kilitlemenin çalışması için sudo chmod a+r {getTouch.getPath()} komutunu uçbirimde çalıştırıp tahtayı yeniden başlatınız.Bunu yapmazsanız tahta 45 dakikada bir kilitlenir.")
    except:
        print("possible-err")
    app = FullScreenWebViewExample()
    Gtk.main()
