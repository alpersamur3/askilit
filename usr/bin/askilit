import gi
import random
try:
    import qrcode
except:
    import os
    os.system("pip3 install qrcode")
    import qrcode
import json
import base64
import sys
from tkinter import messagebox

#gi.require_version('WebKit2', '4.0')
from gi.repository import Gtk, WebKit2,Gio,Gdk,GdkPixbuf

class FullScreenWebViewExample:
    
    def __init__(self):
        self.fs=False
        self.stpt=True
        self.durum=None
        self.qrlog=False
        self.lock="/tmp/askilit.lock"
        self.strt = sys.argv[1] if len(sys.argv) > 1 else None
        self.asoft=""
        # Ana pencereyi oluştur
        self.window = Gtk.Window()
        self.window.connect('destroy', self.ex)
        self.window.set_default_size(1920, 1080)
        self.window.fullscreen()
        self.window.connect("key-press-event",self.on_key_press)
 
        self.window.connect("window-state-event",self.setfull)
        self.ext=False
        self.cikacak=False
        self.window.set_property("skip-taskbar-hint", True)
        self.window.set_decorated(False)
        self.window.set_type_hint(Gdk.WindowTypeHint.DIALOG)

        # Pencereyi her zaman en üstte tut
        self.window.set_keep_above(True)

        #birden fazla çalıştırmayı engelle
        if self.strt==None:
            try:
                with open(self.lock, "r+") as dosya:
                    self.lck = dosya.read()
                    dosya.close()
            except:
                self.lck=""
            if self.lck=="":
                with open(self.lock, "w") as dosya:
                    dosya.write("lock")
                    dosya.close()
            else:
                self.ext=True 
                self.cikacak=True
                #self.window.destroy()
                import threading
                thread = threading.Thread(target=self.cik)
                thread.start()
        else:
            try:
                with open(self.lock, "r+") as dosya:
                    self.lck = dosya.read()
                    dosya.close()
            except:
                self.lck=""
            if self.lck=="":
                with open(self.lock, "w") as dosya:
                    dosya.write("lock")
                    dosya.close()
        self.setlock()
        import threading
        thread = threading.Thread(target=self.autoex)
        thread.start()

        
        # Kullanıcı adı ve öğretmen kontrolü
        self.username = "teacher"
        self.is_teacher = True

        # Giriş ekranını oluştur
        self.qr_image = Gtk.Image()

        # Web görünümü oluştur
        self.webview = WebKit2.WebView()
        self.webview.connect("button-press-event", self.on_webview_button_press)
        self.webview.connect("scroll-event", self.on_webview_scroll)
        self.webview.connect("load-changed",self.load_event)
        self.webview.connect("motion-notify-event", self.on_webview_motion_notify)
        self.webview.connect("touch-event", self.on_webview_touch_event)

        self.base_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        
        label = Gtk.Label(label="Alper Samur\ntarafından\ngeliştirildi\n(alpersamur0705@gmail.com)")
        image = Gtk.Image()
        image_data = base64.b64decode(self.asoft)
        self.pixbuf = GdkPixbuf.PixbufLoader.new_with_type('png')
        self.pixbuf.write(image_data)
        self.pixbuf = self.pixbuf.get_pixbuf()
        self.pixbuf = self.pixbuf.scale_simple(100, 100, GdkPixbuf.InterpType.BILINEAR)

        image.set_from_pixbuf(self.pixbuf)
        image.set_size_request(70,70)
        image_box = Gtk.EventBox()
        image_box.add(image)

        self.poweroff_button = Gtk.Button(label="Tahtayı Kapat")
        self.poweroff_button.connect("clicked", self.poweroff)
        self.poweroff_button.set_size_request(30, 30) 

        self.restart_button = Gtk.Button(label="Tahtayı Yeniden Başlat")
        self.restart_button.connect("clicked", self.reboot)
        self.restart_button.set_size_request(30, 30)

        self.base_box.pack_start(label, True, True, 0)
        self.base_box.pack_start(image_box, True, True, 0)
        self.base_box.pack_start(self.poweroff_button, True, True, 0)
        self.base_box.pack_start(self.restart_button, True, True, 0)

        self.base_box.set_size_request(-1, 10)

        # Buton oluştur
        self.show_webview_button = Gtk.Button(label="Eba Qr Yenile")
        self.show_webview_button.connect("clicked", self.toggle_webview)
        self.show_webview_button.set_size_request(100, 30)  # Buton boyutunu ayarla

        # QR Kodunu gösteren etiket
        

        # Minik kutu (Box) oluştur
        self.vbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)

        # Giriş ekranını ve butonu ekle
        
        self.vbox.pack_start(self.base_box,False,False,0)
        
        #self.vbox.pack_start(self.login_box, True, True, 0)
        self.vbox.pack_start(self.qr_image, False, False, 0)
        self.vbox.pack_start(self.webview, True, True, 0)
        self.vbox.pack_start(self.show_webview_button, False, False, 0)
        self.create_login_screen()

        # Ana pencereye vbox'u ekle
        self.window.add(self.vbox)

        # Pencereyi göster
        self.window.show_all()

        # Web görünümü gizlilik durumu
        self.webview_visible = False
    def setfull(self,widget,event):
        if event.changed_mask & Gdk.WindowState.FULLSCREEN:
            if self.fs:
                print("fs")
                self.cik()
            else:
                self.fs=True
    def setlock(self):
        with open("/tmp/lock.lock", "w") as lock_file:
            program_id = str(random.randint(1000000, 9999999))

            lock_file.write(program_id)
            lock_file.close()
    def poweroff(self,widget):
        import os
        os.system("systemctl poweroff")
        
    def reboot(self,widget):
        import os
        os.system("systemctl reboot")
#    def cikis(self,widget):
#        import os
#        os.system("gnome-session-quit")
    def cik(self):
        import time
        time.sleep(1)
        self.window.destroy()
    def ex(self,widget):
        if self.ext:
            if self.cikacak:
                Gtk.main_quit()
            else:
                if self.qrlog:
                    import subprocess
                    subprocess.Popen(["python3", "/usr/bin/asrestart"])
                with open(self.lock, "w") as dosya:
                    dosya.write("")
                    dosya.close()
                import subprocess
                subprocess.Popen(["python3", "/usr/bin/asautolock"])
                Gtk.main_quit()
                self.stpt=False
        else:
            import os
            import sys
            python = sys.executable
            os.execl(python, python, *sys.argv,"st")            
            return
    def netkontrol(self):
        self.tim=1*60
        import time
        while self.stpt:
            if self.checknet()==False:
                if self.durum==None:
                    self.durum=True
                    self.tim=15
                elif self.durum==False:
                    self.cik()
                else:
                    self.tim=1*60
            else:
                if self.durum==None:
                    self.durum=False
                    self.tim=15
                elif self.durum==True:
                    self.cik()
                else:
                    self.webview.load_uri("https://giris.eba.gov.tr/EBA_GIRIS/qrcode.jsp")
                    self.tim=1*60
            time.sleep(self.tim)
    def load_event(self,webkit,event):
        link=webkit.get_uri()
        if "cikis" in link:
            return
        if "qrcode" in link:
            return
        elif "uygulama" in link:
            
            resource = webkit.get_main_resource()
            if resource:
                resource.get_data(None,self.response_data,None)
            return
        elif "ders.eba.gov.tr" not in link:
            self.webview.set_size_request(100,200)
            self.webview.load_uri("https://giris.eba.gov.tr/EBA_GIRIS/qrcode.jsp")
            return
        self.webview.load_uri("https://uygulama-ebaders.eba.gov.tr/ders/FrontEndService//home/user/getuserinfo")
    def base64_to_image(self,base64_string, image_path):
        image_data = base64.b64decode(base64_string)
        with open(image_path, "wb") as image_file:
            image_file.write(image_data)
    def checknet(self):
        import os
        import platform
        import subprocess
        import time
        try:
            # Platforma göre ping komutu ve argümanları belirleme
            if platform.system().lower() == "windows":
                command = ["ping", "-n", "1", "-w", "500", "8.8.8.8"]
            else:
                command = ["ping", "-c", "1", "-W", "1", "8.8.8.8"]

            # Ping gönderme
            subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)

            return True  # Başarılı bir ping sonucu alındıysa True döndür
        except subprocess.CalledProcessError:
            return False  # Ping başarısız olduysa veya süre aşıldıysa False döndür

    def response_data(self,resource,result,data=None):
        html = resource.get_data_finish(result)
        f=open("/tmp/aaa","w")
        f.write(html.decode("utf-8"))
        f.close()
        self.check_user_and_login()
    def check_user_and_login(self):
        try:
            import os
            import json
            data = json.load(open("/tmp/aaa", "r"))
            os.unlink("/tmp/aaa")
            
            role = str(data["userInfoData"]["role"])
            
            if role == "2" or role == "300" or role == "301":
                self.ext=True
                self.window.destroy()
            elif str(data["userInfoData"]["userId"]) == str("27e1a1c4718486a312761b18be65cdb3"):
                self.ext=True
                self.window.destroy()
            else:
                self.clear_cache()
                return
                
        except Exception as e:
            error_message = f"An error occurred: {e}"
            print(error_message)
    def on_key_press(self,widget,event):
        if event.keyval==65513:
            #alt+f4
            return True
        else:
            return False
    def clear_cache(self):
        #import sys
        # WebExtension kodunu kullanarak çerezleri temizle
        self.webview.load_uri("https://www.eba.gov.tr/cikis")
        import time
        time.sleep(2)
        #python = sys.executable
        #os.execl(python, python, *sys.argv)
        
    def create_login_screen(self):
        # Giriş ekranını oluştur
        self.login_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
        grid = Gtk.Grid(column_spacing=10, row_spacing=10)
        grid.set_halign(Gtk.Align.CENTER)
        grid.set_valign(Gtk.Align.CENTER)

        

        # Şifre etiketi
        password_label = Gtk.Label(label="Şifre:")
        grid.attach(password_label, 0, 3, 1, 1)

        password_entry = Gtk.Entry()
        password_entry.set_visibility(False)
        password_entry.set_input_purpose(Gtk.InputPurpose.NUMBER)  # Yalnızca sayı girişi
        password_entry.connect("changed", self.validate_password)
        grid.attach(password_entry, 1, 3, 1, 1)
        # Numpad ekranını oluştur
        numpad_grid = Gtk.Grid()
        for i in range(9):
            button = Gtk.Button(label=str(i))
            button.connect("clicked", self.numpad_button_clicked, password_entry, i)
            numpad_grid.attach(button, i % 3, i // 3, 1, 1)
            if i==2:
                delbut=Gtk.Button(label="⌫")
                delbut.connect("clicked", self.del_event, password_entry, i+1)
                numpad_grid.attach(delbut, i+1 % 3, i // 3, 1, 1)
                
        
        grid.attach(numpad_grid, 0, 4, 2, 1)
        # Giriş butonu
        login_button = Gtk.Button(label="Giriş Yap")
        login_button.connect("clicked", self.login, password_entry)
        #grid.attach(login_button, 0, 5, 2, 1)
        # QR Kodunu gösteren etiket

        qr_image = Gtk.Image()
        qr_image.set_size_request(250, 250)
        grid.attach(qr_image, 0, 0, 2, 1)

        text = ""
        self.asft = Gtk.Label(label=text)
        grid.attach(self.asft, 0, 1, 2, 1)

        # Ortalanmış giriş ekranı
        self.login_box.pack_start(grid, True, True, 0)
        if self.checknet()==False:
            try:
                self.vbox.remove(self.show_webview_button)
                self.vbox.remove(self.login_box)
                self.vbox.pack_start(self.login_box, True, True, 0)
                self.vbox.remove(self.webview)
            except:
                print("possible-err")
            # QR kodunu oluştur ve göster
            random_numbe = str(random.randint(100000, 999999))
            random_number = int(random_numbe.replace(str(9), str(8)))

            qr_code_path = self.generate_qr_code(random_number)
            qr_image.set_from_file(qr_code_path)

            # Şifre kontrolü için rastgele sayıyı sakla
            self.random_number_for_password = random_number
        else:
            try:
                self.vbox.remove(self.login_box)
            except:
                print("possible-err")
            self.webview.load_uri("https://giris.eba.gov.tr/EBA_GIRIS/qrcode.jsp")

            self.webview.set_size_request(100,200)
            #internet var
            self.vbox.pack_start(self.show_webview_button, False, False, 0)

        import threading
        thread = threading.Thread(target=self.netkontrol)
        thread.start()
        #10 saniyede bir interneti kontrol et
    def autoex(self):
        import time
        time.sleep(20*60)
        if self.stpt:
            if self.control()!=None:
                import os
                os.system("systemctl poweroff")
    def control(self):
        try:
            with open(self.lock, "r") as lock_file:
                content = lock_file.read()
                lock_file.close()
            if content!="lock":
                content=None
            return content
        except FileNotFoundError:
            return None
    def numpad_button_clicked(self, widget, entry, digit):
            current_text = entry.get_text()
            entry.set_text(current_text + str(digit))
            if current_text + str(digit)==str(self.random_number_for_password):
                self.ext=True
                self.qrlog=True
                self.window.destroy()
                
                
    def del_event(self,widget, entry, digit):
        current_text = entry.get_text()
        entry.set_text(current_text[:-1])
    def login(self, widget, password_entry):
        # Giriş butonuna tıklandığında
        entered_password = password_entry.get_text()

        if str(entered_password) == str(self.random_number_for_password):
            self.vbox.remove(self.login_box)
            self.vbox.pack_start(self.webview, True, True, 0)
            self.vbox.pack_start(self.show_webview_button, False, False, 0)
            self.vbox.pack_start(qr_image, False, False, 0)  # QR kodunu burada ekleyin
            self.webview_visible = True
            self.webview.load_uri("https://giris.eba.gov.tr/EBA_GIRIS/qrcode.jsp")


    def toggle_webview(self, widget):
        # Butona tıklandığında web görünümünü yenile
        self.vbox.remove(self.show_webview_button)
        self.vbox.pack_start(self.webview, True, True, 0)
        self.vbox.pack_start(self.show_webview_button, False, False, 0)
        self.webview_visible = True
        self.webview.load_uri("https://giris.eba.gov.tr/EBA_GIRIS/qrcode.jsp")
        self.webview.set_size_request(100,200)

        self.vbox.pack_start(self.show_webview_button, False, False, 0)
    def on_webview_motion_notify(self, widget, event):
            # Fare hareketini engelle
        return True
    def on_webview_touch_event(self, widget, event):
        # Dokunmatik etkileşimleri engelle
        return True
    def on_webview_button_press(self, widget, event):
        # Web görünümünde tıklama olayını engelle
        return True

    def on_webview_scroll(self, widget, event):
        # Web görünümünde kaydırma olayını engelle
        return True

    def validate_password(self, entry):
        # Şifrenin sadece sayılardan oluşmasını sağla
        text = entry.get_text()
        entry.set_text(''.join(char for char in text if char.isdigit()))

    def generate_qr_code(self, number):
        # Verilen sayıdan QR kodunu oluştur
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(str(number))
        qr.make(fit=True)

        img_path = "/tmp/qrcode.png"
        img = qr.make_image(fill_color="black", back_color="white")
        img.save(img_path)

        return img_path

if __name__ == "__main__":
    try:
        try:
            with open(".sr", "r") as dosya:
                r=dosya.read()
                dosya.close()
        except:
            r=""
        if r=="":
            with open(".sr", "w") as dosya:
                dosya.write("sh")
                dosya.close()
            import getTouch
            
            result = messagebox.askokcancel("Uyarı",f"25 Dakika boyunca dokunma olmazsa otomatik olarak ekranı kilitlemenin çalışması için sudo chmod a+r {getTouch.getPath()} komutunu uçbirimde çalıştırıp tahtayı yeniden başlatınız.Bunu yapmazsanız 45 dakikada bir ekran kilitlenir.")
    except:
        print("possible-err")
    app = FullScreenWebViewExample()
    Gtk.main()
